.. include:: references.txt

Astrometry Calibration
======================

Performing astrometric calibration is simple in |astropop|. It uses as backend the `astrometry.net`_ program.

In summary, `astrometry.net`_ searches a given field in the sky and computes a `World Coordinate System <https://fits.gsfc.nasa.gov/fits_wcs.html>`_ astrometric solution that can be used to relate a image coorditate ``(x, y)`` to physical sky coordinates, like ``(ra, dec)``.

For a more detailed WCS usage, see |astropy| documentation of |WCS|.

About astrometry.net
--------------------

From `astrometry.net`_ readme: Automatic recognition of astronomical images; or standards-compliant astrometric metadata from data.

So, `astrometry.net`_ creates robust |WCS| calibrations with almost none or no information about the field. It searches the solution around the sky using `index files <http://astrometry.net/doc/readme.html#getting-index-files>`_ and find optimal solutions using a very smart and fast algorithm based on 4-stars asterisms. Detailed explanation of `astrometry.net`_ is given in `Lang et al. (2010) <https://ui.adsabs.harvard.edu/abs/2010AJ....139.1782L/abstract>`_ atricle.

This code can be very fast if enough information about the field is needed. But, slowly, it can find the solution completely blind. It also can run locally in a common laptop. However, to run locally it needs the index files that, some times, can use a large disk space.

An online service is also available at `nova.astrometry.net <https://nova.astrometry.net>`_ and can be accessed by python using `astroquery.astrometry_net <https://astroquery.readthedocs.io/en/latest/astrometry_net/astrometry_net.html>`_ interface. This is recomended for who don't want to download the index files.

Installing astrometry.net
~~~~~~~~~~~~~~~~~~~~~~~~~

`astrometry.net`_ is a C written language that runs in command line. Currently, it only is supported on Linux and Mac. Windows is not supported by the developers. Due to this, its install is a bit tricky and, for most users, it may envolve building from the code. Detailed instructions about building and installing from the code or Linux distribution-specific installs can be found in `astrometry.net installing read-me <http://astrometry.net/doc/build.html#build>`_.

For `Anaconda <https://anaconda.com>`_ users, the project `conda-forge <https://conda-forge.org/>`_, that is a collection of community maintaned packages, provide a simplier way to install `astrometry.net`_ inside conda environments. You just need to:

.. code-block::
    $ conda install -c conda-forge astrometry

or, withing a specific separated environment, use:

.. code-block:: bash
    $ conda install -n <environment_name> -c conda-forge astrometry

Index files
~~~~~~~~~~~

There are several sets of pre-built index files that can be used to run `astrometry.net`_. They are listed in `<http://data.astrometry.net/>`_. For more informations about how to download it, see `astrometry.net indexes read-me<http://astrometry.net/doc/readme.html#getting-index-files>`_.

If you want to download the index files and do not change anything to get it running, the files must be put in ``$INSTALL_DIR/data`` folder. If you download it to another location, you must change the ``$INSTALL_DIR/etc/astrometry.cfg``, adding the ``add_path <location of the indexes>`` line. `astrometry.net`_ will search all the folders listed in the configuration to seek index files.

In |astropop|, there is also an option in all the functions that compute astrometric solutions where you can set the index locations. See individual functions for more information.

Astropop wrapper usage
----------------------

|astropop| do not implement the solution by itself, it just wraps around the `astrometry.net`_ command-line code.

There is two ways to run the `astrometry.net`_ code inside |astropop|. Using a class-like interface and specific helper funcions. |astropop| will take care of prepare the inputs, monitor the process (with realtime logging output), read the outputs and organize them in a structure useful in Python. So you don't need to manually read the solution and deal with a ton of files produced by `astrometry.net`_.

All of them run the code in a similar way, giving the result in the same format.

Solution Format
~~~~~~~~~~~~~~~

The `astrometry.net`_ outputs several files, including plots, but, considering the astrometric solution itself, just a few of them are really useful. So, we decided to store this solution in a |AstrometrySolution| container. It contains:

- wcs: the |WCS| solved instance, created from the solved header.
- header: the FITS |Header| generated by `astrometry.net`_ containing the solution.
- correspondences: a |Table| containing the correspondences between stars seen in the field and the index file used to solve the astrometry by `astrometry.net`_.

To manually build an |AstrometrySolution| container, you just need to pass the solved header and, optionally, the correspondences table.

.. code-block::
    >>> from astropop.astrometry import AstrometricSolution
    >>> from astropy.utils.data import get_pkg_data_filename
    >>> from astropy.io import fits
    >>> fn = get_pkg_data_filename('data/j94f05bgq_flt.fits', package='astropy.wcs.tests')
    >>> header = fits.open(fn)[1].header
    >>> # Correspondeces is optional
    >>> solution = AstrometricSolution(header)
    >>> print(solution.wcs)
    WCS Keywords

    Number of WCS axes: 2
    CTYPE : 'RA---TAN-SIP'  'DEC--TAN-SIP'
    CRVAL : 5.63056810618  -72.05457184278998
    CRPIX : 2048.0  1024.0
    CD1_1 CD1_2  : 1.29056256197165e-05  5.95309123310338e-06
    CD2_1 CD2_2  : 5.0220581265601e-06  -1.2644774105568e-05
    NAXIS : 1  1


Class-like interface
~~~~~~~~~~~~~~~~~~~~

Type-specific helper functions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Astrometry API
--------------

.. automodapi:: astropop.astrometry
    :no-inheritance-diagram:
